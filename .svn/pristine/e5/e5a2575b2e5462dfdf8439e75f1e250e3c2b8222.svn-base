//===========================================================================
//===========================================================================
//===========================================================================
//==     ColorTransfer.cpp   ==   Author: Diana-Maria POPA      ==
//===========================================================================
//===========================================================================
//===========================================================================

//===========================================================================
//===========================================================================
#include "stdafx.h"
#include "ColorTransfer.h"
#include <time.h>
//===========================================================================
//===========================================================================

//===========================================================================
//===========================================================================
#pragma comment(lib, "./FreeImage/FreeImage.lib")
//===========================================================================
//===========================================================================

//===========================================================================
//===========================================================================
#define NUM_CHANNELS	3
#define PROJECTIONS		6
static bool _firstTime = true;
const double firstRot[18] = {1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 
								0.666667 , 0.666667 , -0.333333 , 
								0.666667 ,-0.333333 , 0.666667 , 
								-0.333333 , 0.666667 , 0.666667}; 
ColorTransfer::ColorTransfer(KImage *input , KImage *palette , unsigned int iter )
{
	_inputImage = input;
	_palette = palette;
	_iterations = iter;
	if( _firstTime == true )
	{
		//instantiate the pdf transfer class, after implementing it
		_pdfTransfer  = new PdfTransfer(_iterations);
		_matrixModule = new MatrixModule();
		_firstTime = false;
	}
}

KImage * ColorTransfer::applyRecoloring()
{
	generateRotationMatrix();
	assert(_pdfTransfer);
	return _pdfTransfer->NDPdfTransfer( _inputImage , _palette, _rotations );
}

void ColorTransfer::generateRotationMatrix()
{
	_rotations = new double*[_iterations];
	assert(_matrixModule);
	for (unsigned int i = 0 ; i < _iterations ; ++ i )
	{
		_rotations[i]  = new double[NUM_CHANNELS * PROJECTIONS ];
		if( !i )
		{
			//_rotations[i] = firstRot;
			_matrixModule->matrix_copy(_rotations[i],firstRot,NUM_CHANNELS*PROJECTIONS);
		}
		else 
		{	
			double * rand = _matrixModule->matrix_generate_random(9);
			double * Q = new double[9];
			_matrixModule->matrix_gram_schmidt( rand , 3,3,Q);
			_matrixModule->matrix_multiply( _rotations[0] , 3,3,Q ,3,3, _rotations[i] , 3, 3 );
			delete [] rand;
			delete [] Q;
		}

	}
	
}


