//===========================================================================
//===========================================================================
//===========================================================================
//==     ColorTransfer.cpp   ==   Author: Diana-Maria POPA      ==
//===========================================================================
//===========================================================================
//===========================================================================

//===========================================================================
//===========================================================================
#include "stdafx.h"
#include "ColorTransfer.h"
#include <time.h>
//===========================================================================
//===========================================================================

//===========================================================================
//===========================================================================
#pragma comment(lib, "./FreeImage/FreeImage.lib")
//===========================================================================
//===========================================================================

//===========================================================================
//===========================================================================
#define NUM_CHANNELS	3
#define PROJECTIONS		6
static bool _firstTime = true;
const double firstRot[18] = {1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 
								0.666667 , 0.666667 , -0.333333 , 
								0.666667 ,-0.333333 , 0.666667 , 
								-0.333333 , 0.666667 , 0.666667}; 
ColorTransfer::ColorTransfer( KImage *input , KImage *palette , unsigned int iter )
{
	unsigned int inputOffset = input->GetWidth() * input->GetHeight();
	unsigned int paletteOffset = palette->GetWidth() * palette->GetHeight();
	_inputImage = new double[3*inputOffset];
	_palette = new double[3*paletteOffset];
	
	/*for ( unsigned int i = 0 ; i < 3 ; ++i )
	{
		_inputImage[i] = new double[input->GetWidth() * input->GetHeight()];
		_palette[i] = new double[palette->GetWidth() * palette->GetHeight()];
	}
	*/

	input->BeginDirectAccess();

	for ( unsigned int i = 0 ; i < input->GetWidth() ; ++i )
	{
		for (unsigned int j = 0 ; j < input->GetHeight() ; ++j )
		{
			KRGBColor color ;
			input->Get24BPPPixel(j,i,&color);
			_inputImage[ i * input->GetWidth() + j ] = color.r/255.0;
			_inputImage[inputOffset + i* input->GetWidth() + j ] = color.g/255.0;
			_inputImage[2 *inputOffset +  i* input->GetWidth() + j ] = color.b/255.0;
			
		}
	}
	input->EndDirectAccess();
	palette->BeginDirectAccess();
	for ( unsigned int i = 0 ; i < palette->GetWidth() ; ++i )
	{
		for (unsigned int j = 0 ; j < palette->GetHeight() ; ++j )
		{
			KRGBColor color ;
			palette->Get24BPPPixel(j,i,&color);
			_palette[i* palette->GetWidth() + j ] = color.r/255.0;
			_palette[paletteOffset +  i* palette->GetWidth() + j ] = color.g/255.0;
			_palette[2*paletteOffset +  i* palette->GetWidth() + j ] = color.b/255.0;
		}
	}
	palette->EndDirectAccess();

	_iterations = iter;
	if( _firstTime == true )
	{
		//instantiate the pdf transfer class, after implementing it
		_pdfTransfer  = new PdfTransfer(_iterations , PROJECTIONS , inputOffset ,
											paletteOffset);
		_matrixModule = new MatrixModule();

		_firstTime = false;
	}
}

KImage * ColorTransfer::applyRecoloring()
{
	generateRotationMatrix();
	assert(_pdfTransfer);
	return _pdfTransfer->NDPdfTransfer( _inputImage , _palette, _rotations);
}

void ColorTransfer::generateRotationMatrix()
{
	_rotations = new double*[_iterations];
	assert(_matrixModule);
	FILE *fp = fopen("test.txt","w");
	
	for (unsigned int i = 0 ; i < _iterations ; ++ i )
	{
		_rotations[i]  = new double[NUM_CHANNELS * PROJECTIONS ];
		if( !i )
		{
			//_rotations[i] = firstRot;
			_matrixModule->matrix_copy(_rotations[i],firstRot,NUM_CHANNELS*PROJECTIONS);
		}
		else 
		{	
			double * rand = _matrixModule->matrix_generate_random(9);
			double * Q = new double[9];
			_matrixModule->matrix_gram_schmidt( rand , 3 , 3 , Q );
			for (unsigned int k = 0 ; k < 3 ; ++ k )
			{
				for (unsigned int l = 0 ; l < 3 ; ++ l  )
				{
					fprintf ( fp , " %.5f %.5f  : " , Q[k*3 + l]  , rand[k * 3 + l]) ;
				}
				fprintf ( fp , "\n" ) ; 
			}
			_matrixModule->matrix_multiply( _rotations[0] , PROJECTIONS , 
				NUM_CHANNELS , Q , NUM_CHANNELS , NUM_CHANNELS , _rotations[i] , 
				PROJECTIONS , NUM_CHANNELS );
			delete [] rand;
			delete [] Q;
		}

	}
	fprintf ( fp , "Now printing results : \n\n" ) ;
	for (unsigned int i = 0 ; i < _iterations ; ++ i )
	{
		for (unsigned int j = 0 ; j < NUM_CHANNELS*PROJECTIONS ; ++ j  )
		{
			fprintf ( fp , "%.5f " , _rotations[i][j] ) ;
		}
		fprintf ( fp , "\n" ) ; 
	}
	fclose(fp);
	
}


